python函数定义：
    def 函数名(参数列表):
        ["注释快"](可选)
        语句块(代码块) 语句块不能省略，如果为空语句，需要填充pass关键字
        return [返回值](可选)

函数的调用:
    函数名(实际参数)
调用说明：
    1.函数调用是一个表达式
    2.如果没有return语句，函数执行完毕返回None值对象
    3.如果函数需要返回其他的值对象需要用return语句
    4.函数调用作为模块内部语句时，需要先定义函数，后调用函数


函数参数
关键字传参
比如def sum(a,b,c)
传入参数sum(a=1,b=2,c=3)和sum(b=2,a=1,c=3)是一样的，因为这里已经指定了a=1,b=2,c=3

序列传参  list tuple str
s1=[l1,l2,l3]
sum(*s1)  #等同于 sum(s1[0],s1[1],s2[2])

字典关键字传参：
实参和形参通过字典进行传递和匹配，字典的值传递给键对应的形参
d1={"c":33,"a":11，“b”:22}
sum(**d1) 字典传参 而且对应的abc要有，多一个少一个都不行
d2={"c":33,"a":11，“b”:22,"d":100} #error d不存在
d3={"c":33,"a":11}  #error 少一个argument

函数的缺省参数 C++有，c没有
函数的形参如果被赋予默认参数值，那么该函数在调用时，如果对应的形参没有实参进行值传递，则使用默认计算值


命名关键字形参
语法：
    def 函数名(*,命名关键字形参)
或
    def 函数名(*args,命名关键字形参)

字典形参
def 函数名(**字典名)  字典形参是可变长的，不是固定的

python作用域4个分类
1.局部作用域(函数内) Lcoal
2.外部嵌套函数作用域  (函数1里嵌套函数2，函数1里就是外部嵌套函数作用域)
3.函数定义所在模块(文件)的作用域
4.python内置模块作用域

变量名的查找规则：
在访问变量时，先查找本地变量，然后是包裹此函数的外部函数的函数内部变量，之后是全局变量，最后是内置变量

全局声明 global
def f():
    global v #声明全局变量

函数式变成的基础风格特征
函数变量
    函数名是变量，它在创建函数时绑定一个函数对象
例：
    def fn():
        print("hello world")
    f1=fn
    f1() #等同于调用函数f()   浅拷贝


# 函数作为函数的参数传递

偏函数
    函数有很多参数时，如果固定住一些参数，可以利用functools模块Partial得到一个偏函数，方便以后使用
int('12345',base=8)  将8进制的12345转换为10进制
使用：
import functools
int2=functools.partial(int,base=2)  int2功能将2进制转化为10进制

lambda表达式(匿名函数)
作用：
    创建一个匿名函数对象
    同def类似，但不提供函数名
语法：
    lambda [参数1，参数2……]: 表达式
    注：[]内的部分表示可以省略
例如
def myadd(x,y):
    return x+y
#改写为lambda
myadd = lambda x,y:x+y

